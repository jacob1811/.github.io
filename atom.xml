<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>芸豆blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://jacob1811.github.io/blog/"/>
  <updated>2019-11-01T12:33:52.261Z</updated>
  <id>https://jacob1811.github.io/blog/</id>
  
  <author>
    <name>jacob</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vim command</title>
    <link href="https://jacob1811.github.io/blog/2019/11/01/vim-command/"/>
    <id>https://jacob1811.github.io/blog/2019/11/01/vim-command/</id>
    <published>2019-11-01T02:32:02.000Z</published>
    <updated>2019-11-01T12:33:52.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vscode-命令"><a href="#vscode-命令" class="headerlink" title="vscode 命令"></a>vscode 命令</h3><p>运行js:</p><blockquote><p> control+option+N </p></blockquote><h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><p>屏幕截图：</p><blockquote><p>command+shift+3/4</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vscode-命令&quot;&gt;&lt;a href=&quot;#vscode-命令&quot; class=&quot;headerlink&quot; title=&quot;vscode 命令&quot;&gt;&lt;/a&gt;vscode 命令&lt;/h3&gt;&lt;p&gt;运行js:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; control+option+
      
    
    </summary>
    
    
    
      <category term="command" scheme="https://jacob1811.github.io/blog/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>箭头函数与普通函数区别，普通函数可以通过new生成实例，箭头函数可以吗？why?</title>
    <link href="https://jacob1811.github.io/blog/2019/11/01/My-New-Post/"/>
    <id>https://jacob1811.github.io/blog/2019/11/01/My-New-Post/</id>
    <published>2019-10-31T23:19:34.000Z</published>
    <updated>2019-11-01T12:34:08.984Z</updated>
    
    <content type="html"><![CDATA[<p>/**</p><ul><li>箭头函数与普通函数区别，普通函数可以通过new生成实例，箭头函数可以吗？why?</li><li>区别：</li><li>1.更加简洁</li><li>2.箭头函数没有自己的this,它内部的this从属于函数所属上下文（call和apply也无法改变）</li><li>3.箭头函数没有arguments (类数组)只能基于 …arg 获取参数（数组）</li><li>4.箭头函数不能被new执行, 箭头函数没有自己的this, 没有prototype</li><li>/</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const y = 7</span></span><br><span class="line"><span class="comment">//  function fn(x)&#123;</span></span><br><span class="line"><span class="comment">//   // const y = 7</span></span><br><span class="line"><span class="comment">//   return function(y)&#123;</span></span><br><span class="line"><span class="comment">//     console.log(x,y);</span></span><br><span class="line"><span class="comment">//     return x+y</span></span><br><span class="line"><span class="comment">//   &#125;(y)</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">// //  console.log(fn(4))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  let fn1= x =&gt;&#123;</span></span><br><span class="line"><span class="comment">//    return (y =&gt; &#123;</span></span><br><span class="line"><span class="comment">//      console.log(111,x,y);</span></span><br><span class="line"><span class="comment">//      return x+y;</span></span><br><span class="line"><span class="comment">//     &#125;)(y)</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">// let fn2 = x=&gt;y=&gt;x+y;</span></span><br><span class="line"><span class="comment">//  console.log(fn1(3));</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// * 2.箭头函数没有自己的this,它内部的this从属于函数所属上下文（call和apply也无法改变）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// let obj = &#123;</span></span><br><span class="line"><span class="comment">//   name:'jack'</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// function fn1()&#123;</span></span><br><span class="line"><span class="comment">//   console.log(this.name);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// let fn2=()=&gt;&#123;</span></span><br><span class="line"><span class="comment">//   console.log(this.name);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// fn1();// undefined</span></span><br><span class="line"><span class="comment">// fn1.call(obj)//jack</span></span><br><span class="line"><span class="comment">// fn2() // undefined</span></span><br><span class="line"><span class="comment">// fn2.call(obj) // undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// document.body.onclick=function()&#123;</span></span><br><span class="line"><span class="comment">//   console.log(this); // this: body</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// document.body.onclick=()=&gt;&#123;</span></span><br><span class="line"><span class="comment">//   console.log(this); // this: windows </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// document.body.onclick=function()&#123;</span></span><br><span class="line"><span class="comment">//   // this: body</span></span><br><span class="line"><span class="comment">//   arr.sort(function(a,b)&#123;</span></span><br><span class="line"><span class="comment">//     // this: window 回调函数中的this一般都是window</span></span><br><span class="line"><span class="comment">//     return a-b</span></span><br><span class="line"><span class="comment">//   &#125;) </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// document.body.onclick=function()&#123;</span></span><br><span class="line"><span class="comment">//   // this: body</span></span><br><span class="line"><span class="comment">//   arr.sort((a,b)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     // this: body</span></span><br><span class="line"><span class="comment">//     return a-b</span></span><br><span class="line"><span class="comment">//   &#125;) </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// JQ forEach</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">arr,callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,len=arr.length;i&lt;len;i++)&#123;</span><br><span class="line">     <span class="keyword">let</span> item = arr[i]</span><br><span class="line">     index=i</span><br><span class="line">    <span class="comment">//  callback(item,index) // this: window</span></span><br><span class="line">     <span class="keyword">let</span> flag = callback.call(arr,item,index)  <span class="comment">// this: arr</span></span><br><span class="line">     <span class="comment">//接收回调函数返回的结果 如果是false结束循环</span></span><br><span class="line">     <span class="keyword">if</span> (flag === <span class="literal">false</span>)&#123;</span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>);   </span><br><span class="line">     <span class="built_in">console</span>.log(item,index);</span><br><span class="line">     <span class="keyword">if</span>(index&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 3.箭头函数没有arguments (类数组)只能基于 ...arg 获取参数（数组）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let fn03 = ()=&gt;&#123;</span></span><br><span class="line"><span class="comment">//   console.log(arguments);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// let fn04 = (...arg)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//   console.log(arg);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// fn03(10,20,30)</span></span><br><span class="line"><span class="comment">// fn04(10,20,30)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x =<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.getX = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn()</span><br><span class="line">f.getX()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Fn01 = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.dir(Fn01)</span><br><span class="line"><span class="comment">// Fn01.prototype.getX = function()&#123;  // Cannot set property 'getX' of undefined</span></span><br><span class="line"><span class="comment">//   console.log(this.x);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// let f01 = new Fn01() // Fn01 is not a constructor</span></span><br><span class="line"><span class="comment">// f01.getX()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;箭头函数与普通函数区别，普通函数可以通过new生成实例，箭头函数可以吗？why?&lt;/li&gt;
&lt;li&gt;区别：&lt;/li&gt;
&lt;li&gt;1.更加简洁&lt;/li&gt;
&lt;li&gt;2.箭头函数没有自己的this,它内部的this从属于函数所属上下文（call和a
      
    
    </summary>
    
    
    
      <category term="js" scheme="https://jacob1811.github.io/blog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jacob1811.github.io/blog/2019/11/01/hello-world/"/>
    <id>https://jacob1811.github.io/blog/2019/11/01/hello-world/</id>
    <published>2019-10-31T22:09:07.025Z</published>
    <updated>2019-11-01T12:34:23.315Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
      <category term="introduce" scheme="https://jacob1811.github.io/blog/tags/introduce/"/>
    
  </entry>
  
</feed>
